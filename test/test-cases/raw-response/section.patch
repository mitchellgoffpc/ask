Here's the modified file with the 'model' argument renamed to 'policy':

```python
import os
import time
import torch
import argparse
import numpy as np
import gymnasium as gym
import multiprocessing as mp
from tqdm import tqdm
from pathlib import Path
from cartpole.models import MLP

[UNCHANGED]

def run_episode(policy_path, num_simulations, epsilon, render=False, save=False):
    model = None
    if policy_path:
        model = MLP(input_size=4, output_size=2, hidden_size=64).eval()
        model.load_state_dict(torch.load(policy_path))

    env = gym.make('CartPole-v1', render_mode='human' if render else None)
    observation, _ = env.reset()
    env.step(env.action_space.sample())  # state is a numpy array on the first iter, after the first step it becomes a tuple

[UNCHANGED]

def _run_episode(args):
    return run_episode(*args)

def run_multiple_episodes(policy_path, episode_dir, num_episodes, num_simulations, epsilon):
    st = time.time()
    with mp.Pool(processes=mp.cpu_count()) as pool:
        results = list(tqdm(pool.imap(_run_episode, [(policy_path, num_simulations, epsilon, False, True) for i in range(num_episodes)]), total=num_episodes))
    et = time.time()

[UNCHANGED]

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Run CartPole episodes with optional model.')
    parser.add_argument('-p', '--policy', type=str, help='Path to the policy model checkpoint')
    parser.add_argument('-n', '--num_episodes', type=int, default=100, help='Number of episodes to run')
    parser.add_argument('-s', '--num_simulations', type=int, default=50, help='Number of simulations to run')
    parser.add_argument('-e', '--epsilon', type=float, default=0.0, help='Epsilon value for epsilon-greedy policy')
    parser.add_argument('-o', '--output', help='Save the episodes to disk')
    parser.add_argument('--render', action='store_true', help='Render the episodes')
    args = parser.parse_args()

    episode_dir = None
    if args.output:
        episode_dir = Path(args.output)
        episode_dir.mkdir(parents=True, exist_ok=True)
        for f in episode_dir.glob('episode_*.npz'):
            f.unlink()

    if args.render:
        steps, *_ = run_episode(args.policy, args.num_simulations, args.epsilon, render=True)
        print(f"Episode finished after {steps} steps.")
    else:
        run_multiple_episodes(args.policy, episode_dir, args.num_episodes, args.num_simulations, args.epsilon)
```